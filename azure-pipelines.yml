trigger:
  branches:
    include:
      - main

variables:
  - group: terraform-variables

stages:
  - stage: LintValidate
    displayName: "Terraform Lint & Validate"
    jobs:
      - job: Validate
        pool:
          name: 'Default'
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                echo "##[group]Terraform Format"
                terraform fmt -check -recursive
                echo "##[endgroup]"

                echo "##[group]Terraform Init & Validate"
                terraform init -backend=false
                terraform validate
                echo "##[endgroup]"

  - stage: Plan
    displayName: "Terraform Plan"
    dependsOn: LintValidate
    jobs:
      - job: Plan
        pool:
          name: 'Default'
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'terraform-cicd-arm'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                terraform init \
                  -backend-config="resource_group_name=$(BACKEND_RG)" \
                  -backend-config="storage_account_name=$(STORAGE_ACCOUNT_NAME)" \
                  -backend-config="container_name=tfstate" \
                  -backend-config="key=$(BACKEND_KEY)"
                terraform plan -out=tfplan

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)
              artifactName: terraformPlan

  - stage: ApproveAndPromoteQA
    displayName: "Manual Approval + Deploy to QA"
    dependsOn: Plan
    jobs:
      - deployment: DeployQA
        environment: 'qa'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo "Simulate QA deployment"
                  displayName: "QA Deploy Placeholder"

  - stage: ApproveAndPromoteProd
    displayName: "Manual Approval + Deploy to Prod"
    dependsOn: ApproveAndPromoteQA
    jobs:
      - deployment: DeployProd
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo "Deploy to PROD â€” with rollback plan"
                  displayName: "Prod Deploy Placeholder"
